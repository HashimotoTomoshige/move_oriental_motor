// Generated by gencpp from file om_modbus_master/om_query.msg
// DO NOT EDIT!


#ifndef OM_MODBUS_MASTER_MESSAGE_OM_QUERY_H
#define OM_MODBUS_MASTER_MESSAGE_OM_QUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace om_modbus_master
{
template <class ContainerAllocator>
struct om_query_
{
  typedef om_query_<ContainerAllocator> Type;

  om_query_()
    : slave_id(0)
    , func_code(0)
    , write_addr(0)
    , read_addr(0)
    , write_num(0)
    , read_num(0)
    , data()  {
      data.assign(0);
  }
  om_query_(const ContainerAllocator& _alloc)
    : slave_id(0)
    , func_code(0)
    , write_addr(0)
    , read_addr(0)
    , write_num(0)
    , read_num(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef int8_t _slave_id_type;
  _slave_id_type slave_id;

   typedef int8_t _func_code_type;
  _func_code_type func_code;

   typedef int32_t _write_addr_type;
  _write_addr_type write_addr;

   typedef int32_t _read_addr_type;
  _read_addr_type read_addr;

   typedef int8_t _write_num_type;
  _write_num_type write_num;

   typedef int8_t _read_num_type;
  _read_num_type read_num;

   typedef boost::array<int32_t, 32>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::om_modbus_master::om_query_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::om_modbus_master::om_query_<ContainerAllocator> const> ConstPtr;

}; // struct om_query_

typedef ::om_modbus_master::om_query_<std::allocator<void> > om_query;

typedef boost::shared_ptr< ::om_modbus_master::om_query > om_queryPtr;
typedef boost::shared_ptr< ::om_modbus_master::om_query const> om_queryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::om_modbus_master::om_query_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::om_modbus_master::om_query_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::om_modbus_master::om_query_<ContainerAllocator1> & lhs, const ::om_modbus_master::om_query_<ContainerAllocator2> & rhs)
{
  return lhs.slave_id == rhs.slave_id &&
    lhs.func_code == rhs.func_code &&
    lhs.write_addr == rhs.write_addr &&
    lhs.read_addr == rhs.read_addr &&
    lhs.write_num == rhs.write_num &&
    lhs.read_num == rhs.read_num &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::om_modbus_master::om_query_<ContainerAllocator1> & lhs, const ::om_modbus_master::om_query_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace om_modbus_master

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::om_modbus_master::om_query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::om_modbus_master::om_query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::om_modbus_master::om_query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::om_modbus_master::om_query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::om_modbus_master::om_query_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::om_modbus_master::om_query_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::om_modbus_master::om_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd058172d3e9da0a2f32dcfbfb854ef2";
  }

  static const char* value(const ::om_modbus_master::om_query_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd058172d3e9da0aULL;
  static const uint64_t static_value2 = 0x2f32dcfbfb854ef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::om_modbus_master::om_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "om_modbus_master/om_query";
  }

  static const char* value(const ::om_modbus_master::om_query_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::om_modbus_master::om_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 slave_id\n"
"int8 func_code\n"
"int32 write_addr\n"
"int32 read_addr\n"
"int8 write_num\n"
"int8 read_num\n"
"int32[32] data\n"
"\n"
;
  }

  static const char* value(const ::om_modbus_master::om_query_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::om_modbus_master::om_query_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.slave_id);
      stream.next(m.func_code);
      stream.next(m.write_addr);
      stream.next(m.read_addr);
      stream.next(m.write_num);
      stream.next(m.read_num);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct om_query_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::om_modbus_master::om_query_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::om_modbus_master::om_query_<ContainerAllocator>& v)
  {
    s << indent << "slave_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.slave_id);
    s << indent << "func_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.func_code);
    s << indent << "write_addr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.write_addr);
    s << indent << "read_addr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.read_addr);
    s << indent << "write_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.write_num);
    s << indent << "read_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.read_num);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OM_MODBUS_MASTER_MESSAGE_OM_QUERY_H
