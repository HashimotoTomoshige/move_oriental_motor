// Generated by gencpp from file om_modbus_master/om_state.msg
// DO NOT EDIT!


#ifndef OM_MODBUS_MASTER_MESSAGE_OM_STATE_H
#define OM_MODBUS_MASTER_MESSAGE_OM_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace om_modbus_master
{
template <class ContainerAllocator>
struct om_state_
{
  typedef om_state_<ContainerAllocator> Type;

  om_state_()
    : state_driver(0)
    , state_mes(0)
    , state_error(0)  {
    }
  om_state_(const ContainerAllocator& _alloc)
    : state_driver(0)
    , state_mes(0)
    , state_error(0)  {
  (void)_alloc;
    }



   typedef int8_t _state_driver_type;
  _state_driver_type state_driver;

   typedef int8_t _state_mes_type;
  _state_mes_type state_mes;

   typedef int8_t _state_error_type;
  _state_error_type state_error;





  typedef boost::shared_ptr< ::om_modbus_master::om_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::om_modbus_master::om_state_<ContainerAllocator> const> ConstPtr;

}; // struct om_state_

typedef ::om_modbus_master::om_state_<std::allocator<void> > om_state;

typedef boost::shared_ptr< ::om_modbus_master::om_state > om_statePtr;
typedef boost::shared_ptr< ::om_modbus_master::om_state const> om_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::om_modbus_master::om_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::om_modbus_master::om_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::om_modbus_master::om_state_<ContainerAllocator1> & lhs, const ::om_modbus_master::om_state_<ContainerAllocator2> & rhs)
{
  return lhs.state_driver == rhs.state_driver &&
    lhs.state_mes == rhs.state_mes &&
    lhs.state_error == rhs.state_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::om_modbus_master::om_state_<ContainerAllocator1> & lhs, const ::om_modbus_master::om_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace om_modbus_master

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::om_modbus_master::om_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::om_modbus_master::om_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::om_modbus_master::om_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::om_modbus_master::om_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::om_modbus_master::om_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::om_modbus_master::om_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::om_modbus_master::om_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ca78fb54bec4d50221d27446cc48826";
  }

  static const char* value(const ::om_modbus_master::om_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ca78fb54bec4d50ULL;
  static const uint64_t static_value2 = 0x221d27446cc48826ULL;
};

template<class ContainerAllocator>
struct DataType< ::om_modbus_master::om_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "om_modbus_master/om_state";
  }

  static const char* value(const ::om_modbus_master::om_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::om_modbus_master::om_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 state_driver\n"
"int8 state_mes\n"
"int8 state_error\n"
"\n"
;
  }

  static const char* value(const ::om_modbus_master::om_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::om_modbus_master::om_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_driver);
      stream.next(m.state_mes);
      stream.next(m.state_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct om_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::om_modbus_master::om_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::om_modbus_master::om_state_<ContainerAllocator>& v)
  {
    s << indent << "state_driver: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state_driver);
    s << indent << "state_mes: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state_mes);
    s << indent << "state_error: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OM_MODBUS_MASTER_MESSAGE_OM_STATE_H
